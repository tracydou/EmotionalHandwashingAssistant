// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HandTrackerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandTrackerRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HandTrackerRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HandTrackerResponseHandPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandTrackerResponseHandPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandTrackerResponseAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandTrackerResponseAction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_5fmessage_2eproto() {
  protobuf_AddDesc_tracker_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker_message.proto");
  GOOGLE_CHECK(file != NULL);
  HandTrackerRequest_descriptor_ = file->message_type(0);
  static const int HandTrackerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerRequest, request_type_),
  };
  HandTrackerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandTrackerRequest_descriptor_,
      HandTrackerRequest::default_instance_,
      HandTrackerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandTrackerRequest));
  HandTrackerRequest_RequestType_descriptor_ = HandTrackerRequest_descriptor_->enum_type(0);
  HandTrackerResponseHandPos_descriptor_ = file->message_type(1);
  static const int HandTrackerResponseHandPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseHandPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseHandPos, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseHandPos, z_),
  };
  HandTrackerResponseHandPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandTrackerResponseHandPos_descriptor_,
      HandTrackerResponseHandPos::default_instance_,
      HandTrackerResponseHandPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseHandPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseHandPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandTrackerResponseHandPos));
  HandTrackerResponseAction_descriptor_ = file->message_type(2);
  static const int HandTrackerResponseAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseAction, action_),
  };
  HandTrackerResponseAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandTrackerResponseAction_descriptor_,
      HandTrackerResponseAction::default_instance_,
      HandTrackerResponseAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandTrackerResponseAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandTrackerResponseAction));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandTrackerRequest_descriptor_, &HandTrackerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandTrackerResponseHandPos_descriptor_, &HandTrackerResponseHandPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandTrackerResponseAction_descriptor_, &HandTrackerResponseAction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_5fmessage_2eproto() {
  delete HandTrackerRequest::default_instance_;
  delete HandTrackerRequest_reflection_;
  delete HandTrackerResponseHandPos::default_instance_;
  delete HandTrackerResponseHandPos_reflection_;
  delete HandTrackerResponseAction::default_instance_;
  delete HandTrackerResponseAction_reflection_;
}

void protobuf_AddDesc_tracker_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025tracker_message.proto\"\234\001\n\022HandTrackerR"
    "equest\022D\n\014request_type\030\001 \002(\0162\037.HandTrack"
    "erRequest.RequestType:\rLEFT_HAND_POS\"@\n\013"
    "RequestType\022\021\n\rLEFT_HAND_POS\020\000\022\022\n\016RIGHT_"
    "HAND_POS\020\001\022\n\n\006ACTION\020\002\"F\n\032HandTrackerRes"
    "ponseHandPos\022\014\n\001x\030\001 \002(\002:\0010\022\014\n\001y\030\002 \002(\002:\0010"
    "\022\014\n\001z\030\003 \002(\002:\0010\".\n\031HandTrackerResponseAct"
    "ion\022\021\n\006action\030\001 \002(\005:\0010", 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker_message.proto", &protobuf_RegisterTypes);
  HandTrackerRequest::default_instance_ = new HandTrackerRequest();
  HandTrackerResponseHandPos::default_instance_ = new HandTrackerResponseHandPos();
  HandTrackerResponseAction::default_instance_ = new HandTrackerResponseAction();
  HandTrackerRequest::default_instance_->InitAsDefaultInstance();
  HandTrackerResponseHandPos::default_instance_->InitAsDefaultInstance();
  HandTrackerResponseAction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_5fmessage_2eproto {
  StaticDescriptorInitializer_tracker_5fmessage_2eproto() {
    protobuf_AddDesc_tracker_5fmessage_2eproto();
  }
} static_descriptor_initializer_tracker_5fmessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* HandTrackerRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandTrackerRequest_RequestType_descriptor_;
}
bool HandTrackerRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HandTrackerRequest_RequestType HandTrackerRequest::LEFT_HAND_POS;
const HandTrackerRequest_RequestType HandTrackerRequest::RIGHT_HAND_POS;
const HandTrackerRequest_RequestType HandTrackerRequest::ACTION;
const HandTrackerRequest_RequestType HandTrackerRequest::RequestType_MIN;
const HandTrackerRequest_RequestType HandTrackerRequest::RequestType_MAX;
const int HandTrackerRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HandTrackerRequest::kRequestTypeFieldNumber;
#endif  // !_MSC_VER

HandTrackerRequest::HandTrackerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandTrackerRequest::InitAsDefaultInstance() {
}

HandTrackerRequest::HandTrackerRequest(const HandTrackerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandTrackerRequest::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandTrackerRequest::~HandTrackerRequest() {
  SharedDtor();
}

void HandTrackerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandTrackerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandTrackerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandTrackerRequest_descriptor_;
}

const HandTrackerRequest& HandTrackerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fmessage_2eproto();
  return *default_instance_;
}

HandTrackerRequest* HandTrackerRequest::default_instance_ = NULL;

HandTrackerRequest* HandTrackerRequest::New() const {
  return new HandTrackerRequest;
}

void HandTrackerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandTrackerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HandTrackerRequest.RequestType request_type = 1 [default = LEFT_HAND_POS];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HandTrackerRequest_RequestType_IsValid(value)) {
            set_request_type(static_cast< ::HandTrackerRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandTrackerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HandTrackerRequest.RequestType request_type = 1 [default = LEFT_HAND_POS];
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandTrackerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HandTrackerRequest.RequestType request_type = 1 [default = LEFT_HAND_POS];
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandTrackerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HandTrackerRequest.RequestType request_type = 1 [default = LEFT_HAND_POS];
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandTrackerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandTrackerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandTrackerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandTrackerRequest::MergeFrom(const HandTrackerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandTrackerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandTrackerRequest::CopyFrom(const HandTrackerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandTrackerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HandTrackerRequest::Swap(HandTrackerRequest* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandTrackerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandTrackerRequest_descriptor_;
  metadata.reflection = HandTrackerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandTrackerResponseHandPos::kXFieldNumber;
const int HandTrackerResponseHandPos::kYFieldNumber;
const int HandTrackerResponseHandPos::kZFieldNumber;
#endif  // !_MSC_VER

HandTrackerResponseHandPos::HandTrackerResponseHandPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandTrackerResponseHandPos::InitAsDefaultInstance() {
}

HandTrackerResponseHandPos::HandTrackerResponseHandPos(const HandTrackerResponseHandPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandTrackerResponseHandPos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandTrackerResponseHandPos::~HandTrackerResponseHandPos() {
  SharedDtor();
}

void HandTrackerResponseHandPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandTrackerResponseHandPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandTrackerResponseHandPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandTrackerResponseHandPos_descriptor_;
}

const HandTrackerResponseHandPos& HandTrackerResponseHandPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fmessage_2eproto();
  return *default_instance_;
}

HandTrackerResponseHandPos* HandTrackerResponseHandPos::default_instance_ = NULL;

HandTrackerResponseHandPos* HandTrackerResponseHandPos::New() const {
  return new HandTrackerResponseHandPos;
}

void HandTrackerResponseHandPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandTrackerResponseHandPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandTrackerResponseHandPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandTrackerResponseHandPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandTrackerResponseHandPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandTrackerResponseHandPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandTrackerResponseHandPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandTrackerResponseHandPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandTrackerResponseHandPos::MergeFrom(const HandTrackerResponseHandPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandTrackerResponseHandPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandTrackerResponseHandPos::CopyFrom(const HandTrackerResponseHandPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandTrackerResponseHandPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HandTrackerResponseHandPos::Swap(HandTrackerResponseHandPos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandTrackerResponseHandPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandTrackerResponseHandPos_descriptor_;
  metadata.reflection = HandTrackerResponseHandPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandTrackerResponseAction::kActionFieldNumber;
#endif  // !_MSC_VER

HandTrackerResponseAction::HandTrackerResponseAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandTrackerResponseAction::InitAsDefaultInstance() {
}

HandTrackerResponseAction::HandTrackerResponseAction(const HandTrackerResponseAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandTrackerResponseAction::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandTrackerResponseAction::~HandTrackerResponseAction() {
  SharedDtor();
}

void HandTrackerResponseAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandTrackerResponseAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandTrackerResponseAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandTrackerResponseAction_descriptor_;
}

const HandTrackerResponseAction& HandTrackerResponseAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fmessage_2eproto();
  return *default_instance_;
}

HandTrackerResponseAction* HandTrackerResponseAction::default_instance_ = NULL;

HandTrackerResponseAction* HandTrackerResponseAction::New() const {
  return new HandTrackerResponseAction;
}

void HandTrackerResponseAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandTrackerResponseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandTrackerResponseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1 [default = 0];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandTrackerResponseAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1 [default = 0];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandTrackerResponseAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1 [default = 0];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandTrackerResponseAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandTrackerResponseAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandTrackerResponseAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandTrackerResponseAction::MergeFrom(const HandTrackerResponseAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandTrackerResponseAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandTrackerResponseAction::CopyFrom(const HandTrackerResponseAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandTrackerResponseAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HandTrackerResponseAction::Swap(HandTrackerResponseAction* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandTrackerResponseAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandTrackerResponseAction_descriptor_;
  metadata.reflection = HandTrackerResponseAction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
