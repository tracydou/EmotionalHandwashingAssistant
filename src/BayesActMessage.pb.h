// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BayesActMessage.proto

#ifndef PROTOBUF_BayesActMessage_2eproto__INCLUDED
#define PROTOBUF_BayesActMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace EHwA {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BayesActMessage_2eproto();
void protobuf_AssignDesc_BayesActMessage_2eproto();
void protobuf_ShutdownFile_BayesActMessage_2eproto();

class BayesActRequest;
class BayesActRespond;

// ===================================================================

class BayesActRequest : public ::google::protobuf::Message {
 public:
  BayesActRequest();
  virtual ~BayesActRequest();

  BayesActRequest(const BayesActRequest& from);

  inline BayesActRequest& operator=(const BayesActRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BayesActRequest& default_instance();

  void Swap(BayesActRequest* other);

  // implements Message ----------------------------------------------

  BayesActRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BayesActRequest& from);
  void MergeFrom(const BayesActRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double evaluation = 1;
  inline bool has_evaluation() const;
  inline void clear_evaluation();
  static const int kEvaluationFieldNumber = 1;
  inline double evaluation() const;
  inline void set_evaluation(double value);

  // required double potency = 2;
  inline bool has_potency() const;
  inline void clear_potency();
  static const int kPotencyFieldNumber = 2;
  inline double potency() const;
  inline void set_potency(double value);

  // required double activity = 3;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 3;
  inline double activity() const;
  inline void set_activity(double value);

  // required int32 handAction = 4;
  inline bool has_handaction() const;
  inline void clear_handaction();
  static const int kHandActionFieldNumber = 4;
  inline ::google::protobuf::int32 handaction() const;
  inline void set_handaction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EHwA.BayesActRequest)
 private:
  inline void set_has_evaluation();
  inline void clear_has_evaluation();
  inline void set_has_potency();
  inline void clear_has_potency();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_handaction();
  inline void clear_has_handaction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double evaluation_;
  double potency_;
  double activity_;
  ::google::protobuf::int32 handaction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_BayesActMessage_2eproto();
  friend void protobuf_AssignDesc_BayesActMessage_2eproto();
  friend void protobuf_ShutdownFile_BayesActMessage_2eproto();

  void InitAsDefaultInstance();
  static BayesActRequest* default_instance_;
};
// -------------------------------------------------------------------

class BayesActRespond : public ::google::protobuf::Message {
 public:
  BayesActRespond();
  virtual ~BayesActRespond();

  BayesActRespond(const BayesActRespond& from);

  inline BayesActRespond& operator=(const BayesActRespond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BayesActRespond& default_instance();

  void Swap(BayesActRespond* other);

  // implements Message ----------------------------------------------

  BayesActRespond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BayesActRespond& from);
  void MergeFrom(const BayesActRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double evaluation = 1;
  inline bool has_evaluation() const;
  inline void clear_evaluation();
  static const int kEvaluationFieldNumber = 1;
  inline double evaluation() const;
  inline void set_evaluation(double value);

  // required double potency = 2;
  inline bool has_potency() const;
  inline void clear_potency();
  static const int kPotencyFieldNumber = 2;
  inline double potency() const;
  inline void set_potency(double value);

  // required double activity = 3;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 3;
  inline double activity() const;
  inline void set_activity(double value);

  // required int32 prompt = 4;
  inline bool has_prompt() const;
  inline void clear_prompt();
  static const int kPromptFieldNumber = 4;
  inline ::google::protobuf::int32 prompt() const;
  inline void set_prompt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EHwA.BayesActRespond)
 private:
  inline void set_has_evaluation();
  inline void clear_has_evaluation();
  inline void set_has_potency();
  inline void clear_has_potency();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_prompt();
  inline void clear_has_prompt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double evaluation_;
  double potency_;
  double activity_;
  ::google::protobuf::int32 prompt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_BayesActMessage_2eproto();
  friend void protobuf_AssignDesc_BayesActMessage_2eproto();
  friend void protobuf_ShutdownFile_BayesActMessage_2eproto();

  void InitAsDefaultInstance();
  static BayesActRespond* default_instance_;
};
// ===================================================================


// ===================================================================

// BayesActRequest

// required double evaluation = 1;
inline bool BayesActRequest::has_evaluation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BayesActRequest::set_has_evaluation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BayesActRequest::clear_has_evaluation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BayesActRequest::clear_evaluation() {
  evaluation_ = 0;
  clear_has_evaluation();
}
inline double BayesActRequest::evaluation() const {
  return evaluation_;
}
inline void BayesActRequest::set_evaluation(double value) {
  set_has_evaluation();
  evaluation_ = value;
}

// required double potency = 2;
inline bool BayesActRequest::has_potency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BayesActRequest::set_has_potency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BayesActRequest::clear_has_potency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BayesActRequest::clear_potency() {
  potency_ = 0;
  clear_has_potency();
}
inline double BayesActRequest::potency() const {
  return potency_;
}
inline void BayesActRequest::set_potency(double value) {
  set_has_potency();
  potency_ = value;
}

// required double activity = 3;
inline bool BayesActRequest::has_activity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BayesActRequest::set_has_activity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BayesActRequest::clear_has_activity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BayesActRequest::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
inline double BayesActRequest::activity() const {
  return activity_;
}
inline void BayesActRequest::set_activity(double value) {
  set_has_activity();
  activity_ = value;
}

// required int32 handAction = 4;
inline bool BayesActRequest::has_handaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BayesActRequest::set_has_handaction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BayesActRequest::clear_has_handaction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BayesActRequest::clear_handaction() {
  handaction_ = 0;
  clear_has_handaction();
}
inline ::google::protobuf::int32 BayesActRequest::handaction() const {
  return handaction_;
}
inline void BayesActRequest::set_handaction(::google::protobuf::int32 value) {
  set_has_handaction();
  handaction_ = value;
}

// -------------------------------------------------------------------

// BayesActRespond

// required double evaluation = 1;
inline bool BayesActRespond::has_evaluation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BayesActRespond::set_has_evaluation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BayesActRespond::clear_has_evaluation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BayesActRespond::clear_evaluation() {
  evaluation_ = 0;
  clear_has_evaluation();
}
inline double BayesActRespond::evaluation() const {
  return evaluation_;
}
inline void BayesActRespond::set_evaluation(double value) {
  set_has_evaluation();
  evaluation_ = value;
}

// required double potency = 2;
inline bool BayesActRespond::has_potency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BayesActRespond::set_has_potency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BayesActRespond::clear_has_potency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BayesActRespond::clear_potency() {
  potency_ = 0;
  clear_has_potency();
}
inline double BayesActRespond::potency() const {
  return potency_;
}
inline void BayesActRespond::set_potency(double value) {
  set_has_potency();
  potency_ = value;
}

// required double activity = 3;
inline bool BayesActRespond::has_activity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BayesActRespond::set_has_activity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BayesActRespond::clear_has_activity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BayesActRespond::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
inline double BayesActRespond::activity() const {
  return activity_;
}
inline void BayesActRespond::set_activity(double value) {
  set_has_activity();
  activity_ = value;
}

// required int32 prompt = 4;
inline bool BayesActRespond::has_prompt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BayesActRespond::set_has_prompt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BayesActRespond::clear_has_prompt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BayesActRespond::clear_prompt() {
  prompt_ = 0;
  clear_has_prompt();
}
inline ::google::protobuf::int32 BayesActRespond::prompt() const {
  return prompt_;
}
inline void BayesActRespond::set_prompt(::google::protobuf::int32 value) {
  set_has_prompt();
  prompt_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EHwA

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BayesActMessage_2eproto__INCLUDED
