// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BayesActMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BayesActMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EHwA {

namespace {

const ::google::protobuf::Descriptor* BayesActMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BayesActMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BayesActMessage_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BayesActMessage_2eproto() {
  protobuf_AddDesc_BayesActMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BayesActMessage.proto");
  GOOGLE_CHECK(file != NULL);
  BayesActMessage_descriptor_ = file->message_type(0);
  static const int BayesActMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, evaluation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, potency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, handaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, prompt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, messagetype_),
  };
  BayesActMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BayesActMessage_descriptor_,
      BayesActMessage::default_instance_,
      BayesActMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BayesActMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BayesActMessage));
  BayesActMessage_MessageType_descriptor_ = BayesActMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BayesActMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BayesActMessage_descriptor_, &BayesActMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BayesActMessage_2eproto() {
  delete BayesActMessage::default_instance_;
  delete BayesActMessage_reflection_;
}

void protobuf_AddDesc_BayesActMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025BayesActMessage.proto\022\004EHwA\"\337\001\n\017BayesA"
    "ctMessage\022\022\n\nevaluation\030\001 \002(\001\022\017\n\007potency"
    "\030\002 \002(\001\022\020\n\010activity\030\003 \002(\001\022\022\n\nhandAction\030\004"
    " \001(\005\022\016\n\006prompt\030\005 \001(\005\0226\n\013messageType\030\006 \002("
    "\0162!.EHwA.BayesActMessage.MessageType\"9\n\013"
    "MessageType\022\024\n\020CLIENT_TO_SERVER\020\000\022\024\n\020SER"
    "VER_TO_CLIENT\020\001", 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BayesActMessage.proto", &protobuf_RegisterTypes);
  BayesActMessage::default_instance_ = new BayesActMessage();
  BayesActMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BayesActMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BayesActMessage_2eproto {
  StaticDescriptorInitializer_BayesActMessage_2eproto() {
    protobuf_AddDesc_BayesActMessage_2eproto();
  }
} static_descriptor_initializer_BayesActMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BayesActMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BayesActMessage_MessageType_descriptor_;
}
bool BayesActMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BayesActMessage_MessageType BayesActMessage::CLIENT_TO_SERVER;
const BayesActMessage_MessageType BayesActMessage::SERVER_TO_CLIENT;
const BayesActMessage_MessageType BayesActMessage::MessageType_MIN;
const BayesActMessage_MessageType BayesActMessage::MessageType_MAX;
const int BayesActMessage::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BayesActMessage::kEvaluationFieldNumber;
const int BayesActMessage::kPotencyFieldNumber;
const int BayesActMessage::kActivityFieldNumber;
const int BayesActMessage::kHandActionFieldNumber;
const int BayesActMessage::kPromptFieldNumber;
const int BayesActMessage::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

BayesActMessage::BayesActMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BayesActMessage::InitAsDefaultInstance() {
}

BayesActMessage::BayesActMessage(const BayesActMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BayesActMessage::SharedCtor() {
  _cached_size_ = 0;
  evaluation_ = 0;
  potency_ = 0;
  activity_ = 0;
  handaction_ = 0;
  prompt_ = 0;
  messagetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BayesActMessage::~BayesActMessage() {
  SharedDtor();
}

void BayesActMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BayesActMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BayesActMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BayesActMessage_descriptor_;
}

const BayesActMessage& BayesActMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BayesActMessage_2eproto();
  return *default_instance_;
}

BayesActMessage* BayesActMessage::default_instance_ = NULL;

BayesActMessage* BayesActMessage::New() const {
  return new BayesActMessage;
}

void BayesActMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    evaluation_ = 0;
    potency_ = 0;
    activity_ = 0;
    handaction_ = 0;
    prompt_ = 0;
    messagetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BayesActMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double evaluation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evaluation_)));
          set_has_evaluation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_potency;
        break;
      }

      // required double potency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_potency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &potency_)));
          set_has_potency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_activity;
        break;
      }

      // required double activity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &activity_)));
          set_has_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handAction;
        break;
      }

      // optional int32 handAction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handaction_)));
          set_has_handaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prompt;
        break;
      }

      // optional int32 prompt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prompt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prompt_)));
          set_has_prompt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_messageType;
        break;
      }

      // required .EHwA.BayesActMessage.MessageType messageType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EHwA::BayesActMessage_MessageType_IsValid(value)) {
            set_messagetype(static_cast< ::EHwA::BayesActMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BayesActMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double evaluation = 1;
  if (has_evaluation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->evaluation(), output);
  }

  // required double potency = 2;
  if (has_potency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->potency(), output);
  }

  // required double activity = 3;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->activity(), output);
  }

  // optional int32 handAction = 4;
  if (has_handaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->handaction(), output);
  }

  // optional int32 prompt = 5;
  if (has_prompt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prompt(), output);
  }

  // required .EHwA.BayesActMessage.MessageType messageType = 6;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->messagetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BayesActMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double evaluation = 1;
  if (has_evaluation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->evaluation(), target);
  }

  // required double potency = 2;
  if (has_potency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->potency(), target);
  }

  // required double activity = 3;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->activity(), target);
  }

  // optional int32 handAction = 4;
  if (has_handaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->handaction(), target);
  }

  // optional int32 prompt = 5;
  if (has_prompt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prompt(), target);
  }

  // required .EHwA.BayesActMessage.MessageType messageType = 6;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->messagetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BayesActMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double evaluation = 1;
    if (has_evaluation()) {
      total_size += 1 + 8;
    }

    // required double potency = 2;
    if (has_potency()) {
      total_size += 1 + 8;
    }

    // required double activity = 3;
    if (has_activity()) {
      total_size += 1 + 8;
    }

    // optional int32 handAction = 4;
    if (has_handaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handaction());
    }

    // optional int32 prompt = 5;
    if (has_prompt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prompt());
    }

    // required .EHwA.BayesActMessage.MessageType messageType = 6;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BayesActMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BayesActMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BayesActMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BayesActMessage::MergeFrom(const BayesActMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_evaluation()) {
      set_evaluation(from.evaluation());
    }
    if (from.has_potency()) {
      set_potency(from.potency());
    }
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_handaction()) {
      set_handaction(from.handaction());
    }
    if (from.has_prompt()) {
      set_prompt(from.prompt());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BayesActMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BayesActMessage::CopyFrom(const BayesActMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BayesActMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void BayesActMessage::Swap(BayesActMessage* other) {
  if (other != this) {
    std::swap(evaluation_, other->evaluation_);
    std::swap(potency_, other->potency_);
    std::swap(activity_, other->activity_);
    std::swap(handaction_, other->handaction_);
    std::swap(prompt_, other->prompt_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BayesActMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BayesActMessage_descriptor_;
  metadata.reflection = BayesActMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EHwA

// @@protoc_insertion_point(global_scope)
